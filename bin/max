#!/usr/bin/perl -w
use strict;
use List::Util qw(sum max);
use FindBin qw($RealBin);
use lib "$RealBin/../lib";
use Max;

my $host = $ENV{MAX_HOST};

sub _valid_uint8 {
    my ($id) = @_;
    defined $id     or return 0;
    $id += 0;
    $id == int($id) or return 0;
    $id >= 0        or return 0;
    $id <= 255      or return 0;
    return 1;
}

sub _valid_temperature {
    my ($t) = @_;
    defined $t      or return 0;
    $t += 0;
    ($t * 2) == int($t * 2) or return 0;
    $t >= 0 or return 0;  # limit?
    $t < 60 or return 0;  # limit?
    return 1;
}

sub do_pair {
    my ($room) = @_;

    my $usage = "Usage: $0 pair <roomid>\n";
    _valid_uint8($room) && $room > 0 or die $usage;

    my $max = Max->connect($host)->init;
    print "Press and hold OK/Boost on the new device...\n";
    my $device = $max->pair();
    print "Pairing done; setting room ID...\n";
    my $success = $device->room($room);
    print $success ? "Pairing succesful.\n" : "Pairing failed.\n";
}

sub do_forget {
    my ($addr) = @_;

    my $usage = "Usage: $0 forget <addr>\n";
    ($addr) = (lc $addr // "") =~ /^([0-9A-Fa-f]{6})$/ or die $usage;

    my $max = Max->connect($host)->init;
    $max->forget($addr);
    print "Done.\n";
}

sub do_crosslink {
    my ($room_id) = @_;

    my $usage = "Usage: $0 crosslink <roomid>\n";
    _valid_uint8($room_id) && $room_id > 0 or die $usage;

    my $max = Max->connect($host)->init;
    my $room = $max->room($room_id) or die "There is no room $room_id";
    my @devices = grep !$_->is_cube, $room->devices
        or die "No devices in room $room_id";

    for my $dev (@devices) {
        my @others = grep $_->addr ne $dev->addr, @devices;
        for my $other (@others) {
            printf(
                "Telling %s %s about %s %s...",
                $dev->type, $dev->addr_hex,
                $other->type, $other->addr_hex
            );
            my $success = $dev->add_link($other);
            print $success ? " OK.\n" : " FAILED.\n";
        }
    }
}

sub do_dump {
    require Data::Dumper;
    no warnings 'once';
    $Data::Dumper::Terse    = 1;
    $Data::Dumper::Indent   = 1;
    $Data::Dumper::Purity   = 0;
    $Data::Dumper::Maxdepth = 2;
    my $max = Max->connect($host)->init;
    print Data::Dumper::Dumper($max->devices);
}

sub do_set {
    my ($room_id, $setpoint) = @_;
    $room_id ||= 0;

    my $usage = "Usage: $0 manual <roomid> <temperature per 0.5>\n";
    $room_id eq 'all' or _valid_uint8($room_id) && $room_id > 0 or die $usage;
    _valid_temperature($setpoint) or die $usage;

    my $max = Max->connect($host)->init;

    for my $room ($room_id eq 'all' ? $max->rooms : $max->room($room_id)) {
        $room->devices or warn "No devices in room " . $room->id . "\n";
        $room->setpoint($setpoint) or die "Setting temperature failed";
    }
    print "Done.\n";
}

sub do_summary {
    my $max = Max->connect($host)->init;
    for my $room ($max->rooms) {
        my @devices = $room->devices;
        next if @devices == 1 and $devices[0]->is_cube;

        printf "* %s(%d)\n", $room->name, $room->id if $room->name;
        printf "* room %d\n", $room->id if not $room->name;

        for my $device (@devices) {
            next if $device->is_cube;

            my $extra = 
                $device->has_temperature
                ? sprintf("(current %.1f) ", $device->temperature)
                : $device->has_valve
                ? sprintf("(valve at %d%%) ", $device->valve)
                : "";

            printf(
                "    %-15s %s: %s\@%.1f %s%s\n",
                $device->name || $device->type,
                $device->addr_hex,
                $device->mode,
                $device->setpoint,
                $extra,
                uc $device->flags_as_string,
            );
        }
    }
}

sub do_switch {
    my ($command, $on, $off) = @_;
    $command or die "Usage: $0 switch <command> [<onparam> <offparam>]\n";
    $command .= " %s" if $command !~ /%s/;
    $on  //= 1;
    $off //= 0;

    my $max = Max->connect($host)->init;

    my $switch = grep $_->too_cold, $max->rooms;
    my @valves = map $_->valve, grep $_->has_valve, $max->devices;
    $switch = 0 unless sum(@valves) > 60 or max(@valves) > 50;

    $command = sprintf $command, $switch ? $on : $off;
    print "Executing: $command\n";
    system $command;
}

sub do_name {
    my ($id, $name) = @_;

    $id and defined $name or die "Usage: $0 name <id|room> <name>\n";
    ($name) = $name =~ /^([\x20-\xFF]{0,32})$/ or die "Invalid name.\n";

    my $max = Max->connect($host)->init;
    if (length($id) == 6) {
        my $device = $max->device($id) or die "No such device $id.\n";
        $device->name($name);
    } else {
        my $room = $max->room($id);
        $room->devices or die "No devices in room $id.\n";
        $room->name($name);
    }
    $max->write_metadata;
}

sub do_config {
    my $selector = shift;
    my $param = shift;

    my $usage = "Usage: $0 config <id|room|type|all> <paramname> <values...>\n";
    $selector or die $usage;
    $selector =~ s/s$//;  # make singular

    my $max = Max->connect($host)->init;
    my @devices = grep {
        $selector eq 'all'
        or $_->type eq $selector
        or $_->addr eq $selector
        or $_->room->id eq $selector
    } $max->devices or die "No matching devices.\n";

    if ($param eq 'display') {
        my ($setting) = shift =~ /(current|setpoint)/
            or die "Invalid value. Valid are 'current' and 'setpoint'.\n";

        @_ and die "Too many values.\n";

        for my $device (@devices) {
            printf "Configuring %s %s in %s...",
                $device->type,
                $device->name || $device->addr_hex,
                $device->room->name || "room " . $device->room->id;

            print $device->config_display($setting) ? " OK\n" : " FAILED\n"
        }
        return;
    }
    die "Unknown parameter: $param";
}

$| = 1;

my $command = shift || 'summary';
my $sub = $::{"do_$command"} or die "Unknown subcommand '$command'.\n";

if (not $host) {
    $host = Max->discover or die "MAX_HOST is not set, UDP discovery failed.\n";
    print "Found cube at $host\n";
}

$sub->(@ARGV);

