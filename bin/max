#!/usr/bin/perl -w
use strict;
use utf8;
use open qw(:std :encoding(UTF-8));

use List::Util qw(sum max first);
use FindBin qw($RealBin);

use lib "$RealBin/../lib";
use Max;

my $host = $ENV{MAX_HOST};
my $max;
my $clear = 0;  # bool

sub _valid_uint8 {
    my ($id) = @_;
    defined $id     or return 0;
    $id += 0;
    $id == int($id) or return 0;
    $id >= 0        or return 0;
    $id <= 255      or return 0;
    return 1;
}

sub _valid_temperature {
    my ($t) = @_;
    defined $t      or return 0;
    $t += 0;
    ($t * 2) == int($t * 2) or return 0;
    $t >= 0 or return 0;  # limit?
    $t < 60 or return 0;  # limit?
    return 1;
}

sub clear {
    system 'clear' if $clear;
}

sub do_pair {
    my ($room) = @_;

    my $usage = "Usage: $0 pair <roomid>\n";
    _valid_uint8($room) && $room > 0 or die $usage;

    $max ||= Max->connect($host);
    print "Press and hold OK/Boost on the new device...\n";
    my $device = $max->pair();
    print "Pairing done; setting room ID...\n";
    my $success = $device->room($room);
    print $success ? "Pairing succesful.\n" : "Pairing failed.\n";
}

sub do_forget {
    my ($addr) = @_;

    my $usage = "Usage: $0 forget <addr>\n";
    ($addr) = (lc $addr // "") =~ /^([0-9A-Fa-f]{6})$/ or die $usage;

    $max ||= Max->connect($host);
    $max->forget($addr);
    print "Done.\n";
}

sub do_crosslink {
    my ($room_id) = @_;

    my $usage = "Usage: $0 crosslink <roomid>\n";
    _valid_uint8($room_id) && $room_id > 0 or die $usage;

    $max ||= Max->connect($host);
    my $room = $max->room($room_id) or die "There is no room $room_id";
    my @devices = grep !$_->is_cube, $room->devices
        or die "No devices in " . $room->display_name;

    for my $dev (@devices) {
        my @others = grep $_->addr ne $dev->addr, @devices;
        for my $other (@others) {
            printf(
                "Telling %s about %s...",
                $dev->display_name_room,
                $other->display_name,
            );
            my $success = $dev->add_link($other);
            print $success ? " OK.\n" : " FAILED.\n";
        }
    }
}

sub do_dump {
    require Data::Dumper;
    no warnings 'once';
    $Data::Dumper::Terse    = 1;
    $Data::Dumper::Indent   = 1;
    $Data::Dumper::Purity   = 0;
    $Data::Dumper::Maxdepth = 2;
    $max ||= Max->connect($host);
    print Data::Dumper::Dumper($max->devices);
}

sub do_set {
    my ($room_id, $setpoint) = @_;
    $room_id ||= 0;

    my $usage = "Usage: $0 set <roomid> <boost|eco|comfort|temperature per 0.5>\n";
    $room_id eq 'all' or _valid_uint8($room_id) && $room_id > 0 or die $usage;

    $setpoint eq 'eco' or $setpoint eq 'comfort' or $setpoint eq 'boost'
        or _valid_temperature($setpoint) or die $usage;

    $max ||= Max->connect($host);

    for my $room ($room_id eq 'all' ? $max->rooms : $max->room($room_id)) {
        $room->devices or warn "No devices in " . $room->display_name . ".\n";
        my $t = $setpoint =~ /eco|comfort/ ? $room->get_preset($setpoint) : $setpoint;
        printf "Setting %s temperature to %s.\n", $room->display_name, $t;
        if($setpoint eq 'boost'){
           $room->boost() or die "Boosting temperature failed.\n";
        }else{
           $room->setpoint($t) or die "Setting temperature failed.\n";
        }
    }
    print "Done.\n";
}

sub do_boost {
    my ($room_id) = @_;
    $room_id ||= 0;

    my $usage = "Usage: $0 boost <roomid>\n";
    $room_id eq 'all' or _valid_uint8($room_id) && $room_id > 0 or die $usage;

    $max ||= Max->connect($host);

    for my $room ($room_id eq 'all' ? $max->rooms : $max->room($room_id)) {
        $room->devices or warn "No devices in " . $room->display_name . ".\n";
        printf "Boosting %s.\n", $room->display_name;
        $room->boost() or die "Boosting temperature failed.\n";
    }
    print "Done.\n";
}

sub do_status {
    $max ||= Max->connect($host);
    clear;

    my $width = max(map { length $_->display_name(1) } $max->devices);

    for my $room ($max->rooms) {
        my @devices = $room->devices;
        next if @devices == 1 and $devices[0]->is_cube;

        printf "* %s\n", $room->display_name(1);

        for my $device (@devices) {
            next if $device->is_cube;

            my $setpoint = "";
            $setpoint = sprintf "%s@%.1f ", $device->mode, $device->setpoint
                if $device->has_setpoint;

            my $extra = 
                $device->has_temperature
                ? sprintf("(current %.1f) ", $device->temperature)
                : $device->has_valve
                ? sprintf("(valve at %d%%) ", $device->valve)
                : "";

            printf(
                "    %-${width}s %s%s%s\n",
                $device->display_name(1),
                $setpoint,
                $extra,
                uc $device->flags_as_string,
            );
        }
    }
}

sub do_summary {
    $max ||= Max->connect($host);
    clear;

    my $width = max(map { length $_->display_name(1) } $max->rooms);

    for my $room ($max->rooms) {
        my @devices = $room->devices;
        next if @devices == 1 and $devices[0]->is_cube;

        my @valves = map sprintf("%3d%%", $_->valve),
            grep $_->has_valve, @devices;

        my $t = $room->temperature // 0;
        my $s = $room->setpoint // 0;

	my $color1 = !-t STDOUT ? ""
                   : $t > $s && abs($t - $s) > .2 ? "\e[31m"
                   : $t < $s && abs($t - $s) > .2 ? "\e[34m" : "";

        my $color2 = !-t STDOUT ? ""
                   : $t > $s ? "\e[34m"
                   : $t < $s ? "\e[31m" : "";

	my $endcolor = !-t STDOUT ? "" : "\e[0m";

        printf "* %-${width}s %s%4.1f%s %s→ %4.1f %1s%s %s\n",
            $room->display_name(1),
            $color1,
            $t,
            $endcolor,
            $color2,
            $s,
            ( $s == $room->get_preset("comfort") ? "☀"
            : $s == $room->get_preset("eco")     ? "☾" : ""),
            $endcolor,
            "@valves";
    }
}

sub do_switch {
    my ($command, $on, $off) = @_;
    $command or die "Usage: $0 switch <command> [<onparam> <offparam>]\n";
    $command .= " %s" if $command !~ /%s/;
    $on  //= 1;
    $off //= 0;

    $max ||= Max->connect($host);
    clear;
    my $switch = $max->heat_demand;

    $command = sprintf $command, $switch ? $on : $off;
    print "Executing: $command\n";
    system $command;
}

sub do_name {
    my ($id, $name) = @_;

    $id and defined $name or die "Usage: $0 name <id|room> <name>\n";
    ($name) = $name =~ /^([\x20-\xFF]{0,32})$/ or die "Invalid name.\n";

    $max ||= Max->connect($host);
    if (length($id) == 6) {
        my $device = $max->device($id) or die "No such device $id.\n";
        $device->name($name);
    } else {
        my $room = $max->room($id);
        $room->devices or die "No devices in " . $room->display_name . ".\n";
        $room->name($name);
    }
    $max->write_metadata;
}

sub do_config {
    my $selector = shift;
    my $param = shift;

    my $usage = "Usage: $0 config <id|room|type|all> <paramname> <values...>\n";
    $selector or die $usage;
    $selector =~ s/s$//;  # make singular

    $max ||= Max->connect($host);
    my @devices = grep {
        $selector eq 'all'
        or $_->type eq $selector
        or $_->addr_hex eq $selector
        or $_->room->id eq $selector
    } $max->devices or die "No matching devices.\n";

    if ($param eq 'display') {
        my ($setting) = shift =~ /(current|setpoint)/
            or die "Invalid value. Valid are 'current' and 'setpoint'.\n";

        @_ and die "Too many values.\n";

        for my $device (@devices) {
            printf "Configuring %s...", $device->display_name_room;
            print $device->config_display($setting) ? " OK\n" : " FAILED\n"
        }
        return;
    }
    elsif ($param eq 'temperatures' or $param eq 'temp') {
        @_ < 0 and die "Not enough values";
        @_ > 4 and die "Too many values";
        defined and not $_ and $_ = undef for @_;  # Turn 0 or "" into undef.
        defined and _valid_temperature($_) || die "Invalid temperature: $_" for @_;

        my ($comfort, $eco, $max, $min) = @_;

        for my $device (@devices) {
            printf "Configuring %s...", $device->display_name_room;
            print $device->config_temperatures($comfort, $eco, $max, $min)
                ? " OK\n" : " FAILED\n";
        }
        return;
    }
    elsif ($param eq 'debug') {
        for my $device (@devices) {
            printf "%s: %s\n", $device->addr_hex, unpack "H*", $device->{config};
        }
        return;
    }
    die "Unknown parameter: $param";
}

sub do_reboot {
    $max ||= Max->connect($host);

    $max->reboot;
}

sub do_mqtt {
    $max ||= Max->connect($host);
    clear;
    
    require Net::MQTT::Simple;
    my $hostname = shift;
    my $topic_prefix = shift;
    our $mqtt ||= Net::MQTT::Simple->new($hostname);

    for my $room ($max->rooms) {
        my @devices = $room->devices;
        next if @devices == 1 and $devices[0]->is_cube;

        for my $device (@devices) {
            my $r = $room->display_name;
            my $d = $device->display_name;
            s/\ /-/g for $r, $d;
            my $devtopic = join "/", $topic_prefix, $r, $d;
            my $c = "°C";
            utf8::encode($c);
            $mqtt->retain("$devtopic/valve", $device->valve . " %")
                if $device->has_valve;
            $mqtt->retain("$devtopic/setpoint", $device->setpoint . " $c")
                if $device->has_setpoint;
            $mqtt->retain("$devtopic/temperature", $device->temperature . " $c")
                if $device->has_temperature;
        }
    }
}

$| = 1;


my $loop = -1;
if (@ARGV and $ARGV[0] =~ /^(loop|watch)$/) {
    $clear = 1 if $1 eq 'watch';
    shift;
    $loop = (@ARGV and $ARGV[0] =~ /^\d+$/) ? shift : 10;
}

@ARGV = ('summary') if not @ARGV;

my @orig_ARGV = @ARGV;

while (@ARGV) {
    my $command = shift;
    my $sub = $::{"do_$command"} or die "Unknown subcommand '$command'.\n";

    if (not $host) {
        $host = Max->discover or die "MAX_HOST is not set, UDP discovery failed.\n";
        print "Found cube at $host\n";
    }

    my $i = first { $ARGV[$_] eq ';' } 0..$#ARGV;
    if (defined $i) {
        $sub->(splice @ARGV, 0, $i);
        shift;
        redo;
    } else {
        $sub->(@ARGV);
        @ARGV = ();
    }
    if ($loop >= 0) {
        @ARGV = @orig_ARGV;
        $max->disconnect;
        undef $max;  # disconnect because cube doesn't do concurrency
        sleep $loop;
        print "\n" if not $clear;
    }
}


